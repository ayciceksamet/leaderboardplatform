package com.leaderboard.rankingscore;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.UUID;

import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.platform.runner.JUnitPlatform;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.SetOperations;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.data.redis.core.ZSetOperations;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.instrument.classloading.ShadowingClassLoader;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.incu6us.redis.mock.EnableRedisMockTemplate;
import com.leaderboard.rankingscoreplatform.controller.RankingScoreController;
import com.leaderboard.rankingscoreplatform.model.User;
import com.leaderboard.rankingscoreplatform.repository.RankingScorePlatformRepository;

@ExtendWith(MockitoExtension.class)
@RunWith(JUnitPlatform.class)
@EnableRedisMockTemplate
public class UserControllerTest {

	private MockMvc mockMvc;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this); // Moving this below the next line fixed it...
		mockMvc = MockMvcBuilders.standaloneSetup(userController).build();
		Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);

	}

	@Mock
	RankingScorePlatformRepository userRepositoryDAO;

	@Spy
	private RedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();

	@InjectMocks
	RankingScoreController userController;

	public void testAddEmployee() {

		MockHttpServletRequest request = new MockHttpServletRequest();
		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));

		User user = new User(UUID.randomUUID().toString(), "USER1", Long.valueOf("400"), Long.valueOf("1"), "tr");
		String responseEntity = userController.addUser(user);

		assertThat(responseEntity).isEqualTo("200 OK");
	}

	public static String asJsonString(final Object obj) {
		try {
			return new ObjectMapper().writeValueAsString(obj);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	@Test
	public void testAdd2Employee() {
		User user = new User(UUID.randomUUID().toString(), "USER1", Long.valueOf("400"), Long.valueOf("1"), "tr");
		String requestBody = new ObjectMapper().valueToTree(user).toString();
		try {
			mockMvc.perform(post("/user/create/")
					.contentType(MediaType.APPLICATION_JSON)
					.content(asJsonString(user)))
					// .andExpect((MockMvcResultMatchers.model()).attribute("categories",ALL_CATEGORIES));
					.andExpect(status().isOk());
		}catch(

	NumberFormatException e)
	{
		// TODO Auto-generated catch block
		e.printStackTrace();
	}catch(
	Exception e)
	{
		// TODO Auto-generated catch block
		e.printStackTrace();
	}

}

}
