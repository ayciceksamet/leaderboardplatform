package com.leaderboard.rankingscore.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ZSetOperations.TypedTuple;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.github.javafaker.Faker;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.leaderboard.rankingscore.model.Score;
import com.leaderboard.rankingscore.model.User;
import com.leaderboard.rankingscore.repository.UserRepository;

import ch.qos.logback.core.db.dialect.HSQLDBDialect;
import io.netty.handler.codec.json.JsonObjectDecoder;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.Pipeline;
import redis.clients.jedis.Response;
import redis.clients.jedis.Tuple;

@RestController
public class UserController {

	private static final String KEYSCORE = "users-score";

	@Autowired
	UserRepository userRepository;

	@Autowired
	public RedisTemplate<Object, Object> template;

	@GetMapping(value = "/healthcheck", produces = "application/json; charset=utf-8")
	public String getHealthCheck() {
		return "{ \"isWorking\" : true }";
	}

	@PostMapping("/user/create/")
	public String addUser(@RequestBody User user) {
		UUID uuid = UUID.randomUUID();

		User userCreated = new User(uuid.toString(), user.getDisplayName(), user.getPoints(), user.getRank(),
				user.getCountry());
		userRepository.save(userCreated);
		template.opsForZSet().add(KEYSCORE, userCreated, user.getPoints());
		return "200 OK";
	}

	@PostMapping("/user/bulkcreate/{user_count}")
	public String bulkCreateUser(@PathVariable Integer user_count) {

		int MAX_VALUE = 1000000;

		List<String> countryNames = new ArrayList<>();

		countryNames.add("tr");
		countryNames.add("us");
		countryNames.add("fr");
		countryNames.add("sw");

		CountDownLatch latch = new CountDownLatch(user_count.intValue());

		ExecutorService threadExecutor = Executors.newFixedThreadPool(50);

		for (int i = 0; i < user_count.intValue(); i++) {

			threadExecutor.execute(new Runnable() {

				@Override
				public void run() {

					UUID uuid = UUID.randomUUID();

					Faker faker = new Faker();

					Long point = Integer.toUnsignedLong((new Random().nextInt(MAX_VALUE) * 5));

					User userCreated = new User(uuid.toString(), faker.name().firstName(), point,
							Integer.toUnsignedLong(1), countryNames.get(new Random().nextInt(countryNames.size())));

					userRepository.save(userCreated);

					template.opsForZSet().add(KEYSCORE, userCreated, point);

					latch.countDown();

				}
			});

		}

		try {
			latch.await();
		} catch (InterruptedException E) {
			// handle
		}

		return "200 OK";
	}

	@GetMapping("/user/profile/{user_id}")
	public Optional<User> getUser(@PathVariable String user_id) {

		Optional<User> userCreated = userRepository.findById(user_id);

		userCreated.get().setRank(template.opsForZSet().reverseRank(KEYSCORE, userCreated.get()) + 1);

		return userCreated;
	}

	@GetMapping("/leaderboard")
	public Set<TypedTuple<Object>> getLeaderBoard() {
	
		/*
		
		
		Set<TypedTuple<Object>> userCreated = template.opsForZSet().reverseRangeWithScores(KEYSCORE, 0,
				userRepository.count());

		userCreated.parallelStream().forEach(user -> ((User) user.getValue())
				.setRank(template.opsForZSet().reverseRank(KEYSCORE, (User) user.getValue()) + 1));
		
		Set<TypedTuple<Object>> userCreated = template.opsForZSet().reverseRangeWithScores(KEYSCORE, 0,
				userRepository.count());

		*/
		

		Set<TypedTuple<Object>> userCreated = template.opsForZSet().reverseRangeWithScores(KEYSCORE, 0,
				userRepository.count());
		

		CountDownLatch latch = new CountDownLatch((int) userRepository.count());
		

		ExecutorService threadExecutor = Executors.newFixedThreadPool(1000);

		for (TypedTuple<Object> userIT : userCreated) {

			threadExecutor.execute(new Runnable() {

				@Override
				public void run() {

					User user = (User) userIT.getValue();
					
					user.setRank(template.opsForZSet().reverseRank(KEYSCORE, user) + 1);

				}
			});
			

			latch.countDown();

		}
		
		try {
			latch.await();
		} catch (InterruptedException E) {
			// handle
		}

		return userCreated;
	}

	@GetMapping("/leaderboard/{country_iso_code}")
	public List<TypedTuple<Object>> getLeaderBoardByCountryCode(@PathVariable String country_iso_code) {

		Set<TypedTuple<Object>> userCreated = template.opsForZSet().reverseRangeWithScores(KEYSCORE, 0,
				userRepository.count());

		List<TypedTuple<Object>> userList = userCreated.stream()
				.filter(userOne -> ((User) userOne.getValue()).getCountry().equalsIgnoreCase(country_iso_code))
				.collect(Collectors.toList());

		userList.parallelStream().forEach(user -> ((User) user.getValue())
				.setRank(template.opsForZSet().reverseRank(KEYSCORE, (User) user.getValue()) + 1));
		
		

		return userList;
	}

	@PostMapping("/score/submit/")
	public String submitScore(@RequestBody Score score) {

		Optional<User> userFetched = userRepository.findById(score.getUser_id());

		Long newScore = userFetched.get().getPoints() + score.getScore_worth();

		User userCreated = new User(score.getUser_id(), userFetched.get().getDisplayName(), newScore,
				userFetched.get().getRank(), userFetched.get().getCountry());

		template.opsForZSet().add(KEYSCORE, userCreated, newScore);

		userRepository.save(userCreated);

		return "200 OK";
	}

}
