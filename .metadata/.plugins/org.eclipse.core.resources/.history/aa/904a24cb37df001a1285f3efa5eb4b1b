package com.leaderboard.rankingscore.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ZSetOperations.TypedTuple;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.leaderboard.rankingscore.model.Score;
import com.leaderboard.rankingscore.model.User;
import com.leaderboard.rankingscore.repository.UserRepository;

@RestController
public class UserController {

	private static final String KEYSCORE = "users-score";

	@Autowired
	UserRepository userRepository;

	@Autowired
	public RedisTemplate<Object, Object> template;

	@GetMapping(value = "/healthcheck", produces = "application/json; charset=utf-8")
	public String getHealthCheck() {
		return "{ \"isWorking\" : true }";
	}

	@PostMapping("/user/create/")
	public String addUser(@RequestBody User user) {
		UUID uuid = UUID.randomUUID();

		User userCreated = new User(uuid.toString(), user.getDisplayName(), user.getPoints(), user.getRank(),
				user.getCountry());
		userRepository.save(userCreated);
		template.opsForZSet().add(KEYSCORE, userCreated, user.getPoints());
		return "200 OK";
	}

	@GetMapping("/user/profile/{user_id}")
	public Optional<User> getUser(@PathVariable String user_id) {

		Optional<User> userCreated = userRepository.findById(user_id);

		userCreated.get().setRank(template.opsForZSet().reverseRank(KEYSCORE, userCreated.get()) + 1);

		return userCreated;
	}

	@GetMapping("/leaderboard")
	public Set<TypedTuple<Object>> getLeaderBoard() {

		Set<TypedTuple<Object>> userCreated = template.opsForZSet().reverseRangeWithScores(KEYSCORE, 0, userRepository.count());

		List<User> userList = new ArrayList<>();
		
		CountDownLatch countDownLatch = new CountDownLatch(userCreated.size());
		
		ExecutorService threadExecutor = Executors.newFixedThreadPool(20);
		
		for (TypedTuple<Object> userIT : userCreated) {
			
			threadExecutor.execute(new Runnable() {
				
				@Override
				public void run() {

					User user = (User) userIT.getValue();

					user.setRank(template.opsForZSet().reverseRank(KEYSCORE, user) + 1);

					userList.add(user);
					
					countDownLatch.countDown();
					
				}
			});

		}
		
		try {
			countDownLatch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return userCreated;
	}
	
	@GetMapping("/leaderboard/{country_iso_code}")
	public List<User> getLeaderBoardByCountryCode(@PathVariable String country_iso_code) {

		Set<TypedTuple<Object>> userCreated = template.opsForZSet().reverseRangeWithScores(KEYSCORE, 0, userRepository.count());

		List<User> userList = new ArrayList<>();
		
		ExecutorService threadExecutor = Executors.newFixedThreadPool(20);
		
		for (TypedTuple<Object> userIT : userCreated) {
			
			threadExecutor.execute(new Runnable() {
				
				@Override
				public void run() {

					User user = (User) userIT.getValue();
					
					if (country_iso_code.equalsIgnoreCase(user.getCountry())) {

						user.setRank(template.opsForZSet().reverseRank(KEYSCORE, user) + 1);

						userList.add(user);

					}
					
				}
			});

		}

		return userList;
	}

	@PostMapping("/score/submit/")
	public String submitScore(@RequestBody Score score) {

		Optional<User> userFetched = userRepository.findById(score.getUser_id());

		Long newScore = userFetched.get().getPoints() + score.getScore_worth();

		User userCreated = new User(score.getUser_id(), userFetched.get().getDisplayName(), newScore,
				userFetched.get().getRank(), userFetched.get().getCountry());

		template.opsForZSet().add(KEYSCORE, userCreated, newScore);

		userRepository.save(userCreated);

		return "200 OK";
	}

}
